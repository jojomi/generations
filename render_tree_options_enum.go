// Code generated by go-enum
// DO NOT EDIT!

package generations

import (
	"fmt"
)

const (
	// GenderOrderMaleFirst is a GenderOrder of type MaleFirst
	GenderOrderMaleFirst GenderOrder = iota + 1
	// GenderOrderFemaleFirst is a GenderOrder of type FemaleFirst
	GenderOrderFemaleFirst
)

const _GenderOrderName = "MaleFirstFemaleFirst"

var _GenderOrderMap = map[GenderOrder]string{
	1: _GenderOrderName[0:9],
	2: _GenderOrderName[9:20],
}

// String implements the Stringer interface.
func (x GenderOrder) String() string {
	if str, ok := _GenderOrderMap[x]; ok {
		return str
	}
	return fmt.Sprintf("GenderOrder(%d)", x)
}

var _GenderOrderValue = map[string]GenderOrder{
	_GenderOrderName[0:9]:  1,
	_GenderOrderName[9:20]: 2,
}

// ParseGenderOrder attempts to convert a string to a GenderOrder
func ParseGenderOrder(name string) (GenderOrder, error) {
	if x, ok := _GenderOrderValue[name]; ok {
		return x, nil
	}
	return GenderOrder(0), fmt.Errorf("%s is not a valid GenderOrder", name)
}

const (
	// GraphTypeParent is a GraphType of type Parent
	GraphTypeParent GraphType = iota + 1
	// GraphTypeChild is a GraphType of type Child
	GraphTypeChild
	// GraphTypeSandclock is a GraphType of type Sandclock
	GraphTypeSandclock
)

const _GraphTypeName = "parentchildsandclock"

var _GraphTypeMap = map[GraphType]string{
	1: _GraphTypeName[0:6],
	2: _GraphTypeName[6:11],
	3: _GraphTypeName[11:20],
}

// String implements the Stringer interface.
func (x GraphType) String() string {
	if str, ok := _GraphTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("GraphType(%d)", x)
}

var _GraphTypeValue = map[string]GraphType{
	_GraphTypeName[0:6]:   1,
	_GraphTypeName[6:11]:  2,
	_GraphTypeName[11:20]: 3,
}

// ParseGraphType attempts to convert a string to a GraphType
func ParseGraphType(name string) (GraphType, error) {
	if x, ok := _GraphTypeValue[name]; ok {
		return x, nil
	}
	return GraphType(0), fmt.Errorf("%s is not a valid GraphType", name)
}
