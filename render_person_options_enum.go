// Code generated by go-enum
// DO NOT EDIT!

package generations

import (
	"fmt"
)

const (
	// LastnamePolicyBirth is a LastnamePolicy of type Birth
	LastnamePolicyBirth LastnamePolicy = iota + 1
	// LastnamePolicyCurrent is a LastnamePolicy of type Current
	LastnamePolicyCurrent
	// LastnamePolicyCurrentAndBirth is a LastnamePolicy of type CurrentAndBirth
	LastnamePolicyCurrentAndBirth
)

const _LastnamePolicyName = "BirthCurrentCurrentAndBirth"

var _LastnamePolicyMap = map[LastnamePolicy]string{
	1: _LastnamePolicyName[0:5],
	2: _LastnamePolicyName[5:12],
	3: _LastnamePolicyName[12:27],
}

// String implements the Stringer interface.
func (x LastnamePolicy) String() string {
	if str, ok := _LastnamePolicyMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LastnamePolicy(%d)", x)
}

var _LastnamePolicyValue = map[string]LastnamePolicy{
	_LastnamePolicyName[0:5]:   1,
	_LastnamePolicyName[5:12]:  2,
	_LastnamePolicyName[12:27]: 3,
}

// ParseLastnamePolicy attempts to convert a string to a LastnamePolicy
func ParseLastnamePolicy(name string) (LastnamePolicy, error) {
	if x, ok := _LastnamePolicyValue[name]; ok {
		return x, nil
	}
	return LastnamePolicy(0), fmt.Errorf("%s is not a valid LastnamePolicy", name)
}

const (
	// NodeTypeG is a NodeType of type G
	NodeTypeG NodeType = iota + 1
	// NodeTypeP is a NodeType of type P
	NodeTypeP
	// NodeTypeC is a NodeType of type C
	NodeTypeC
)

const _NodeTypeName = "gpc"

var _NodeTypeMap = map[NodeType]string{
	1: _NodeTypeName[0:1],
	2: _NodeTypeName[1:2],
	3: _NodeTypeName[2:3],
}

// String implements the Stringer interface.
func (x NodeType) String() string {
	if str, ok := _NodeTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("NodeType(%d)", x)
}

var _NodeTypeValue = map[string]NodeType{
	_NodeTypeName[0:1]: 1,
	_NodeTypeName[1:2]: 2,
	_NodeTypeName[2:3]: 3,
}

// ParseNodeType attempts to convert a string to a NodeType
func ParseNodeType(name string) (NodeType, error) {
	if x, ok := _NodeTypeValue[name]; ok {
		return x, nil
	}
	return NodeType(0), fmt.Errorf("%s is not a valid NodeType", name)
}
